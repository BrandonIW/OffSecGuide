#----Overview
The basic principle is simple.  You make a web request to some web svr. The svr processes. The sends back the requested data if authorized to be interpreted by the client's browser and displayed by the user. Typically a webpage will have some common elements:

1) HTML - Core structure/foundation of the site's layout
2) CSS - Stylizing/formatting
3) Javascript - Adds functionality/interactive elements to ensure the webpage is not static


#----HTML
"Elements" and "Tags" define aspects of a webpage i.e.
<head> -> Contains info about the page/title
<body> -> Content displayed to browser
<p> -> Paragraph
<h1> -> Large heading
<img> -> Image

And much more. Tags contain "attributes" that style a tag or element e.g. <p class="bold-text"> (p=tag, class=attribute) <img src="img/cat.jpg"> (src is the attribute defining the location of the img


#----JS
WRT webpages, JS adds functionality. Can be located as raw code within the html src itself as: <script> {javascript} </script> or referenced as <script src="javascript.js"> </script>


#----HTTP
https://hackme.com:443/view-room?id=1
Protocol | domain/host | port | path to resource on the svr | Extra parameters that may be needed

The "method" is included with an http request to tell the svr the client's intentions: 
GET - Pull info from svr
POST - Submit data to svr and make new svr-side records
PUT - Submit data to svr to update existing records
DELETE - Delete

Status codes inform you the outcome of HTTP Requests. The common ones are below:
100-199 - Information. Telling client that the first part of their communication was successful, and to continue
200-299 - Success
300-399 - Redirection of client request
400-499 - Client error
500-599 - Svr error

200 OK - Success
201 CREATED - Resource created
400 Bad Req - Request is incorrect. Possible missing parameter or smth
401 Not Auth. - No permission to access resource unless you login
403 Forbid. - No permission period. Regardless of logging in
404 - Not found
500 - Internal svr error
503 - Unavailable or down


#----Headers
These are additional bits of information sent to a web svr along with the REQUEST. Technically not needed but you'll likely be getting nothing or barebone info back without them. 
1) User Agent - Tells svr what browser you're using. Helps w/ appropropriate server response to be properly read by browser
2) Content-Length - Tells svr how much data to expect in the request. Svr can verify to ensure nothing was missed
3) Accept-encoding - Compression methods that the browser supports to shrink data for transport
4) Cookie - Data sent to the server to help remember your information &/or identify you faster
5) Host - The host you're accessing

Response Headers include:
1) Set-Cookie - Information for the client to store which can be sent back to svr on each req
2) Cache-Control - How long the browser should store the content of the response before it requests a response again 
3) Content-type - Tells the client what type of data is being transmitted e.g. images, js, php, html
4) Content-encoding - Tells client what compression/encoding was used on content 


#----Cookies
Small bits of data sent to the client by a sver's Set-Cookie header. After the browser recieves a cookie, it will send it back to the svr on subsequent requets. In essennce, cookies take the stateless nature of HTTP and turn it into something pseudo-stateful. Often used for authentication where a token value is sent and stored by the client. Can be viewed in browser's dev tools


#----OWASP Top 10
1) Injection - If sanitization of user input is not occurring, possible to inject HTML/CMD/SQL etc e.g. <a href=<url to malicious site>Click here</a>
2) Broken Authentication - Most common form of auth is U&P + Cookies
3) Sensitive Data Exposure - For ex. looking at src code in browser for things like commented out lines, or anything else important
4) XML External Entity - Abuse of XML parsers, allowing an attacker to interact w/ backend files/folders. 
5) Broken Access Controls - The ability of unauthorized users to access restricted webpages. This could be through smth as simple as an insecure direct obj reference e.g. ?acct=admin 
6) Security Misconfig - General misconfigurations. Default creds, unecessary services running, verbose error messages
7) XSS - Malicious scripts onto a webpage that does not perform sanitization and thus can be injected and run on other victim systems. Reflected, stored or DOM based. e.g. w/ reflected we want an immediate response from the webpage after input: <script>alert(window.hostname.location)</script>
8) Insecure Deserialization - Serialization is the process of turning a programming object into a format that is language independent and compatible w/ other apps. Often uses JSON. Deserialization is simply unpacking this data. The vul. is taking adv of often implicit trust of serialized data. For example, editing our cookie to some base64 encoded form of malware. If trusted, it may be trusted by svr, unpacked and run
9) Components w/ known vuln - Missed updates, end-of-life etc.
10) Insufficent logging 


#----Examples
1) Determining the para used by a webpage by searhcing for smth and checking the URL i.e. search?q=gt250 -> para is "q'
2) Editing of username fields w/ tools like BURP w/ values such as ' or 1=1--"
---> "--" comments out anything that comes after the backend code in SQL
---> The beginning ''' character closes the brackets in the SQL query
---> For example smth like {"email":"bender.@juice.com'--","password":"a"} -> The -- comments out the SQL that would process the password, and the ' indicates the end of the SQL query. When sent to the backend, this may allow for a login

---> {"email":"' or 1=1--","password":"test"} -> End of email w/ a black username, or 1=1, which is True. Then comment out the rest
3) Testing vuln. to XSS, for any input/search boxes try: <iframe src="javascript:alert('XSS')"> If we get a popup, that's proof of concept
